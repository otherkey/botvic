import os
import random
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

# üîë –¢–≤–æ–π —Ç–æ–∫–µ–Ω –∏ Chat ID
TOKEN = "7364635550:AAEAA5XoarKX5jlsrtMAC3hChG6WVyAGetg"
#os.environ.get("TOKEN")
#—ç—Ç–æ –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Ç–æ–∫–µ–Ω –∏ –±–æ—Ç –±—É–¥–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
CHAT_ID = -1002670681889  # ‚Üê —Ç–≤–æ–π chat_id –∏–∑ –≥—Ä—É–ø–ø—ã

bot = Bot(token=TOKEN)

#–∫—É—Å–æ–∫ –Ω–∏–∂–µ –ø–∏—à–µ—Ç —Ç–æ–∫–µ–Ω –∞–π–¥–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ
#async def get_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
#    chat_id = update.effective_chat.id
#    print(f"Chat ID: {chat_id}")
#
#app = ApplicationBuilder().token(TOKEN).build()
#
# –õ—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
#app.add_handler(MessageHandler(filters.ALL, get_chat_id))
#
#app.run_polling()


# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –∫—É–¥–∞ –±—É–¥–µ–º —Å–æ—Ö—Ä–∞–Ω—è—Ç—å
text_to_post = ""
buttons = []

async def handle_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global text_to_post

    full_text = update.message.text

    # –£–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ "/mypost " –≤ –Ω–∞—á–∞–ª–µ
    user_input = full_text[len("/mypost "):] if full_text.startswith("/mypost ") else ""

    if user_input.strip():
        text_to_post = user_input
        await update.message.reply_text("–¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ /mypost")


async def handle_add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    
    global buttons
    user_input = update.message.text[len("/myadd "):]

    # –£–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ "/mypost " –≤ –Ω–∞—á–∞–ª–µ
    full_text = update.message.text
    user_input = full_text[len("/myadd "):] if full_text.startswith("/myadd ") else ""


    if user_input.strip():
        buttons.append([InlineKeyboardButton(user_input, callback_data=user_input)])
        await update.message.reply_text(f"–ö–Ω–æ–ø–∫–∞ ¬´{user_input}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ /myadd")


async def handle_button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # –Ω—É–∂–Ω–æ –¥–ª—è "–∞–Ω–∏–º–∞—Ü–∏–∏ –Ω–∞–∂–∞—Ç–∏—è"

    user = query.from_user
    data = query.data  # ‚Üê —ç—Ç–æ —Ç–æ, —á—Ç–æ —Ç—ã —É–∫–∞–∑–∞–ª–∞ –∫–∞–∫ callback_data

    # –ü—Ä–∏–º–µ—Ä: —Å–æ—Ö—Ä–∞–Ω—è–µ–º, –∫—Ç–æ –Ω–∞–∂–∞–ª –∏ —á—Ç–æ
    print(f"{user.first_name} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: {data}")

async def handle_send(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global text_to_post
    if buttons:
        keyboard = InlineKeyboardMarkup(buttons)
        await context.bot.send_message(chat_id=CHAT_ID, text=text_to_post, reply_markup=keyboard)
    else:
        await context.bot.send_message(chat_id=CHAT_ID, text=text_to_post)    

app = ApplicationBuilder().token(TOKEN).build()

app.add_handler(CommandHandler("mypost", handle_post))
app.add_handler(CommandHandler("mysend", handle_send))
app.add_handler(CommandHandler("myadd", handle_add))
app.add_handler(CallbackQueryHandler(handle_button_click))

app.run_polling()